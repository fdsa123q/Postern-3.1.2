// Generated by FakerAndroid for doc or help by https://github.com/Efaker/FakerAndroid
//apply plugin: 'faker.android.application'
apply plugin: 'com.android.application'
dependencies {
    compileOnly fileTree(dir: 'javaScaffoding', include: ['*.jar'])
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0-alpha01'

    testImplementation 'junit:junit:4.+'
    implementation 'androidx.test.ext:junit:1.1.3'

    implementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    implementation 'com.huaweicloud:esdk-obs-android:3.21.12'

    //Below you can custom your dependencies
}

android {
    compileSdkVersion 30
//    buildToolsVersion '29.0.3'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29
        applicationId 'com.tunnelworkshop.postern'
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
            }
        }
        ndk {
            abiFilters 'armeabi-v7a','x86' // you can make one only for dev to improve building speed
        }
        versionCode 28
        versionName '3.1.2'
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndkVersion "22.0.7026061"
    }

    aaptOptions {//TODO NOTE when you happen a asset file access problem you can try add pattern here
        noCompress = ['.unity3d', '.ress', '.resource', '.obb']
        ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    lintOptions {
        abortOnError false
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.debug
            jniDebuggable true
        }
        release {
            debuggable false
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.debug
        }
    }
    //TODO NOTE This is a FakerAndroid feature for hiding sensitive code avoid static dex analysis like passing a appstore checker
    sensitiveOptions {//when build type debuggable is false this feature working only and with this feature working building speed will slow down ,you can make it working when building a release apk
        //collapseToAssetFile 'dex' //keep this string same as c++ fakeDex method last param
        /**confing packages or classe with no ext but this cant include application class or application ref classes **/
        //collapsePackage 'com.google'
        //collapsePackage 'com.vungle'
        //collapsePackage 'com.inmobi'
        //collapsePackage 'com.adcolony'
        //collapsePackage 'com.applovin'
        //collapsePackage 'com.chartboost'
    }
//    packagingOptions { //TODO if you happen a symbol problem try open this
//        doNotStrip '*/armeabi-v7a/*.so'
//        doNotStrip '*/arm64-v8a/*.so'
//    }

    useLibrary 'android.test.runner'

    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}
